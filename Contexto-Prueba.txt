

Ceiba Prueba Tecnica



6. ServiCIOS REST DIDNoteca-
https://git-rba.hackerrank.com/git/f225644f-dddf-4a96-a236-c6cea71d be1d


Springßoot
El sistema busca automatizar el comportamiento de un bibliotecario cuando un usuariodesea prestar un 1íbro.

Un préstamo es representado en nuestro negocio por los siguientes atributos
isbn: identificador único de un 1ibro (campo alfanumérico de máximo 10 dígitos)

identificacion Usuario: número de la 1dentificación del usuario (campo alfanumérico de maximo 10 digitos)
tipoUsuario: determina la relaciốn que tiene el usuario con la biblioteca (campo que puede tener solo un dígito numérico)

1: usuario afilado

2: usuario empleado de la biblioteca

3: usuario invitado

Su objetivo es crear una API tipo REST la cual permita llevar a cabo las siguientes funcionalidades



------------------------------------------------------------
1. Crear un servicio REST con

el Path /prestamo y el método HTTP
tipo POST: pernite crear un prestamo
con las siguientes validaciones

Un usuario invitado solo puede tener un Libro prestado en la biblioteca, si un usuario invitado intenta prestar más de un libro
debería retornar un error HTTP 400
con el siguiente json.





{
"mensaje": "El usuario con identificación Xxxxx ya tiene un libro prestado por lo cual no se le puede fealizar otro préstamo"
}

Para verificar si un usuario ya tiene
un préstamo se debe usar el campo
identificación Usuario
Al momento de realizar el préstamo
se debe hacer el cálculo de la fecha máxima de devolución del libro, con
la siguiente reglas de negocio

1. Si el préstamo lo hace un usuario tipo afiliado la fecha de devoluciôn debería ser la fecha actual más 10 días sin contar sâbados
y domingos

2. Si el préstamo lo hace un usuario tipo empleado la fecha de devolución debería ser la fecha actual más 8 días sin contar sâbados y domingos

3. Si el préstamo lo hace un usuario tipo invitado la fecha de devolución debería ser la fecha actual más 7 días sin contar sâbados y domingos

Esta fecha deberá ser almacenada en la base de datos junto con toda la información del préstamo

4. Si en el campo tipoUsuario 1lega un valor diferente a los permitidos, deberá retornar un un error HTTP 400 con el siguiente JSON



{
"mensaje" : "Tipo de usuario no permitido en la biblioteca "
}
El siguiente es un ejemplo de
petición y un ejemplo de cómo debería ser la respuesta en un caso exitoso
Petición path: /prestamo método:
POST
{
"isbn":"DASD154212"
"identificaciónUsuario" :"154515485"
tipoUsuario":1
}
 Respuesta exitosa: HTTP Status Code 200



{
"id": 1,
"fechaMaximaDevolucion" : "15/02/2021"
}

El id en la respuesta, corresponde al identificador con el que es almacenado en la base de datos, con el cual posteriormente se podrá consultar

Para fechaMaxima Devolucion se debe respetar el formato
dd/MM/yyyy

2. Crear un serviio REST con el Path /prestamo/ {id-prestamo}y el método HTTP tipo GET, donde la variable {id-prestamo} corresponde al identificador con el cual se almacenó el préstamo en la base de datos, explicado en el primer punto.
El siguiente es un ejemplo de petición y un ejemplo de cómo debería ser la respuesta en un caso exitoso

Petición path: fprestamo/1

método: GET

Respuesta exitosa HTTP Status

Code 200





{
"id": 1,
"isbn":"DASD154212",
"identificaciónUsuario""154515485",
"tipoUsuario":1,
"fechaMaximaDevolucion" : "15/02/2021"
}

La base de datos debe ser en memoria, en el archivo application. properties ya se encuentra la configuración la cual está soportada
por el motor H2, si necesita modificar estos archivos o algo de la conexión asegúrese de que sea una base de datos en memoria.
Si necesita ejecutar sentencias DDL(Crear tablas, modificar tablas..) antes de que la aplicación se ejecute, debe crear un archivo
Ilamado schema.sql en la carpeta src/main/resources y spring automáticamente lo ejecutará.
Cumpliento de los requerimientos: para esto hay6 pruebas automatizadas en la clase Prestamo Tests ubicada en el paquete src/test/
java, las cuales son las encargadas de validar que usted cUmpla con cada uno de los requerimientos. Asegurese que al momento de
enviar el código la tarea Test y Build de gradle ejecutan correctamente, esta es la manera de evaluar la prueba. Además cuando
termine la prueba, ejecute la tarea Run Test desde hackerrank.
Estas pruebas se enCuentran fallando y su objetívo es hacerlas funcionar correctamente. Usted puede irlas ejecutando e ir validando
que vaya cumpliendo los requerimientos.

Código limpio: valoramos que su código sea mantenible y con principios de código limpio.


Arquitectura: valoramos que su arquitectura propuesta demuestre una correcta separación de responsabilidades.
Te recomendamos hacer uso del principio de responsabilidad única
Te recomendamos usar un patron de arquitectura, como arquitectura hexagonal, arquitectura limpía o VC.
Trata de no poner la lógica de negocio en los controladores, separa tu logica de acuerdo a las restricciones del patrón de
arquitectura seleccionado.
Pruebas unitarias y de integración: SI tiene conocimientos de pruebas, construir pruebas unitarias o de integraciốn que ayuden a
verificar el funcionamiento de su codigo (recuerde que el paquete calificador no puede ser modi ficado, se deben crear un paquete
distinto) .
Si el sistema identifica que la prueba Iho ha sido desarrollada por usted inmediatamente se cancela el proceso de selección
